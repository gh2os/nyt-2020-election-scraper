import os
import git
import simdjson
import subprocess
from typing import Dict, List, Tuple
from collections import namedtuple, defaultdict

CACHE_VERSION = 3
CACHE_DIR = '_cache'

InputRecord = namedtuple(
    'InputRecord',
    [
        'timestamp',
        'state_name',
        'state_abbrev',
        'electoral_votes',
        'candidates',
        'votes',
        'expected_votes',
        'precincts_total',
        'precincts_reporting',
        'counties',
    ]
)

def git_commits_for(path):
    return subprocess.check_output(['git', 'log', "--format=%H", path]).strip().decode().splitlines()

def git_show(ref, name, repo_client):
    commit_tree = repo_client.commit(ref).tree
    return commit_tree[name].data_stream.read()

def fetch_all_records():
    commits = git_commits_for("results.json")
    repo = git.Repo('.', odbt=git.db.GitCmdObjectDB)
    out = []

    parser = simdjson.Parser()
    for ref in commits:
        cache_path = os.path.join(CACHE_DIR, ref[:2], ref[2:] + ".json")
        if os.path.exists(cache_path):
            with open(cache_path) as fh:
                try:
                    record = simdjson.load(fh)
                except ValueError:
                    continue
                if record['version'] == CACHE_VERSION:
                    for row in record['rows']:
                        out.append(InputRecord(*row))
                    continue

        blob = git_show(ref, 'results.json', repo)
        json_data = parser.parse(blob)
        
        for race in json_data['races']:
            # Attempt to get timestamp from `provider_updated_at` or `updated_at`
            timestamp = race.get('updated_at') or race['reporting_units'][0].get('provider_updated_at', "Unknown Timestamp")
            
            for unit in race['reporting_units']:
                state_name = unit['name']
                state_abbrev = unit.get('state_postal')
                electoral_votes = race.get('outcome', {}).get('electoral_votes')
                total_votes = unit['total_votes']
                expected_votes = unit['total_expected_vote']
                precincts_total = unit['precincts_total']
                precincts_reporting = unit['precincts_reporting']

                # Process candidate information
                candidates = []
                for candidate in unit['candidates']:
                    candidate_votes = candidate['votes']['total']
                    candidates.append({
                        'id': candidate['nyt_id'],
                        'votes': candidate_votes,
                        'leader': candidate['leader']
                    })

                record = InputRecord(
                    timestamp=timestamp,
                    state_name=state_name,
                    state_abbrev=state_abbrev,
                    electoral_votes=electoral_votes,
                    candidates=candidates,
                    votes=total_votes,
                    expected_votes=expected_votes,
                    precincts_total=precincts_total,
                    precincts_reporting=precincts_reporting,
                    counties={}
                )
                out.append(record)

        # Save to cache
        try:
            os.makedirs(os.path.dirname(cache_path))
        except FileExistsError:
            pass
        with open(cache_path, 'w') as fh:
            simdjson.dump({"version": CACHE_VERSION, "rows": out}, fh)

    # Group data by state
    grouped = defaultdict(list)
    for row in out:
        grouped[row.state_name].append(row)

    return grouped