#!/usr/bin/env python3

import csv
import datetime
import email.utils
import git
import hashlib
import os
import simdjson
import subprocess
import json
from textwrap import dedent, indent
from typing import Dict, List, NamedTuple, Optional
from tabulate import tabulate
from collections import defaultdict

# Constants
BATTLEGROUND_STATES = ["Michigan", "Arizona", "Wisconsin", "Nevada", "Pennsylvania"]
CACHE_DIR = '_cache'
CACHE_VERSION = 2

class InputRecord(NamedTuple):
    timestamp: datetime.datetime
    state_name: str
    state_abbrev: str
    electoral_votes: int
    candidates: List[Dict[str, int]]
    votes: int
    expected_votes: int
    precincts_total: int
    precincts_reporting: int
    counties: Dict[str, int]
    hurdle_mov_avg: Optional[float] = None  # Adding hurdle_mov_avg to InputRecord

def git_commits_for(path: str) -> List[str]:
    return subprocess.check_output(['git', 'log', '--format=%H', path]).strip().decode().splitlines()

def git_show(ref: str, name: str, repo_client) -> bytes:
    return repo_client.commit(ref).tree[name].data_stream.read()

def to_python_type(data):
    if isinstance(data, simdjson.Object):
        return {k: to_python_type(v) for k, v in data.items()}
    elif isinstance(data, simdjson.Array):
        return [to_python_type(item) for item in data]
    return data

def process_json_data(json_data: dict) -> List[InputRecord]:
    records = []
    for race in json_data.get("races", []):
        updated_at = datetime.datetime.fromisoformat(race.get("updated_at").replace("Z", "+00:00"))
        for unit in race.get("reporting_units", []):
            candidates = [{"last_name": c.get("nyt_id", ""), "votes": c["votes"]["total"]} for c in unit.get("candidates", [])]
            record = InputRecord(
                timestamp=updated_at,
                state_name=unit.get("name", "Unknown"),
                state_abbrev=unit.get("state_abb", "Unknown"),
                electoral_votes=race.get("electoral_votes", 0),
                candidates=candidates,
                votes=unit.get("total_votes", 0),
                expected_votes=unit.get("total_expected_vote", 0),
                precincts_total=unit.get("precincts_total", 0),
                precincts_reporting=unit.get("precincts_reporting", 0),
                counties={}
            )
            records.append(record)
    return records

def parse_isoformat(timestamp_str):
    if hasattr(datetime.datetime, "fromisoformat"):
        return datetime.datetime.fromisoformat(timestamp_str)
    else:
        if timestamp_str.endswith("Z"):
            timestamp_str = timestamp_str[:-1]
        return datetime.datetime.strptime(timestamp_str, "%Y-%m-%dT%H:%M:%S.%f")

def fetch_all_records():
    commits = git_commits_for("results.json")
    repo = git.Repo('.', odbt=git.db.GitCmdObjectDB)
    parser = simdjson.Parser()
    out = []

    for ref in commits:
        cache_path = os.path.join(CACHE_DIR, ref[:2], ref[2:] + ".json")
        
        if os.path.exists(cache_path):
            with open(cache_path) as fh:
                try:
                    record = json.load(fh)
                except ValueError:
                    continue
                if record.get('version') == CACHE_VERSION:
                    for row in record.get('rows', []):
                        row_data = {**row}
                        if isinstance(row_data['timestamp'], str):
                            row_data['timestamp'] = parse_isoformat(row_data['timestamp'])
                        out.append(InputRecord(**row_data))
                    continue

        blob = git_show(ref, 'results.json', repo)
        json_data = to_python_type(parser.parse(blob))

        rows = process_json_data(json_data)
        out.extend(rows)

        os.makedirs(os.path.dirname(cache_path), exist_ok=True)
        rows_for_cache = [
            {**row._asdict(), 'timestamp': row.timestamp.isoformat() if isinstance(row.timestamp, datetime.datetime) else row.timestamp}
            for row in rows
        ]
        with open(cache_path, 'w') as fh:
            json.dump({"version": CACHE_VERSION, "rows": rows_for_cache}, fh)

    out.sort(key=lambda row: row.timestamp if isinstance(row.timestamp, datetime.datetime) else parse_isoformat(row.timestamp))
    grouped = defaultdict(list)
    for row in out:
        grouped[row.state_name].append(row)

    return grouped

def compute_hurdle_sma(
    summarized_state_data: List[InputRecord], 
    newest_votes: int, 
    new_partition_pct: float, 
    trailing_candidate_name: str
) -> Optional[float]:
    MIN_AGG_VOTES = 30000
    agg_votes = newest_votes
    agg_c2_votes = round(new_partition_pct * newest_votes)
    step = 0

    while step < len(summarized_state_data) and agg_votes < MIN_AGG_VOTES:
        record = summarized_state_data[step]
        step += 1

        new_votes_relevant = sum(candidate['votes'] for candidate in record.candidates)

        if new_votes_relevant > 0:
            trailing_candidate = next(
                (candidate for candidate in record.candidates if candidate['last_name'] == trailing_candidate_name),
                None
            )
            trailing_candidate_partition = trailing_candidate['votes'] / new_votes_relevant if trailing_candidate else 0

            if new_votes_relevant + agg_votes > MIN_AGG_VOTES:
                subset_pct = (MIN_AGG_VOTES - agg_votes) / new_votes_relevant
                agg_votes += round(new_votes_relevant * subset_pct)
                agg_c2_votes += round(trailing_candidate_partition * new_votes_relevant * subset_pct)
            else:
                agg_votes += new_votes_relevant
                agg_c2_votes += round(trailing_candidate_partition * new_votes_relevant)

    hurdle_moving_average = float(agg_c2_votes) / agg_votes if agg_votes else None
    return hurdle_moving_average

def string_summary(record, trailing_candidate_name, summarized_state_data):
    timestamp_str = record.timestamp.strftime("%Y-%m-%d %H:%M")

    sorted_candidates = sorted(record.candidates, key=lambda x: x['votes'], reverse=True)
    leading_candidate = sorted_candidates[0] if sorted_candidates else None
    trailing_candidate = sorted_candidates[1] if len(sorted_candidates) > 1 else None

    leading_candidate_name = leading_candidate['last_name'] if leading_candidate else "N/A"
    trailing_candidate_name = trailing_candidate['last_name'] if trailing_candidate else "N/A"
    vote_differential = leading_candidate['votes'] - trailing_candidate['votes'] if leading_candidate and trailing_candidate else 0
    votes_remaining = record.expected_votes - record.votes if record.expected_votes > 0 else "Unknown"

    last_batch_votes = record.votes
    if last_batch_votes > 0 and leading_candidate and trailing_candidate:
        leading_percentage = (leading_candidate['votes'] / last_batch_votes) * 100
        trailing_percentage = (trailing_candidate['votes'] / last_batch_votes) * 100
        batch_breakdown = f"{leading_candidate_name} {leading_percentage:.1f}% / {trailing_percentage:.1f}% {trailing_candidate_name}"
    else:
        batch_breakdown = "N/A"

    hurdle_mov_avg = compute_hurdle_sma(summarized_state_data, record.votes, 0.5, trailing_candidate_name)
    hurdle_trend = f"{hurdle_mov_avg:.2%}" if hurdle_mov_avg is not None else "n/a"

    return [
        f"{timestamp_str}",
        f"{leading_candidate_name}",
        f"{vote_differential:,}",
        f"{votes_remaining}",
        f"{record.votes:,}",
        batch_breakdown,
        f"{hurdle_trend}",
        "Unknown"
    ]

def generate_txt_output(path, summarized, states_updated):
    with open(path, "w") as f:
        print(tabulate([
            ["Last updated:", datetime.datetime.utcnow().strftime("%Y-%m-%d %H:%M UTC")],
            ["Latest batch received:", f"({', '.join(states_updated)})"],
            ["Web version:", "https://example.com"]
        ]), file=f)
        
        for state, timestamped_results in sorted(summarized.items()):
            trailing_candidate_name = (timestamped_results[0].candidates[1]['last_name'] 
                                       if len(timestamped_results[0].candidates) > 1 else "N/A")

            print(f'\n{state} - Total Votes:', file=f)
            
            summaries = [
                string_summary(summary, trailing_candidate_name, timestamped_results) 
                for summary in timestamped_results
            ]
            print(tabulate(summaries), file=f)

def generate_csv_output(path, summarized):
    with open(path, 'w') as csvfile:
        wr = csv.writer(csvfile)
        wr.writerow(('state',) + InputRecord._fields)
        for state, results in summarized.items():
            for row in results:
                wr.writerow((state,) + row)

def generate_rss_output(path, summarized):
    with open(path, 'w') as rssfile:
        print(dedent(f'''
            <?xml version="1.0" encoding="UTF-8"?>
            <rss version="2.0">
            <channel>
              <title>Election Results Feed</title>
              <link>https://example.com</link>
              <description>Latest results</description>
              <lastBuildDate>{email.utils.formatdate(datetime.datetime.utcnow().timestamp())}</lastBuildDate>
        '''), file=rssfile)

        for state, results in summarized.items():
            if not results:
                continue
            timestamp = results[0].timestamp.timestamp()
            print(indent(dedent(f'''
                <item>
                    <description>{state}: {results[0].candidates[0]["last_name"]} +{results[0].votes}</description>
                    <pubDate>{email.utils.formatdate(timestamp)}</pubDate>
                    <guid isPermaLink="false">{state}@{timestamp}</guid>
                </item>
            '''), "  "), file=rssfile)

        print(dedent('''
             </channel>
            </rss>'''), file=rssfile)

def html_table(summarized: dict) -> List[str]:
    """Generate HTML tables with separate rows for each state's election data."""
    html_output = []
    for state, timestamped_results in sorted(summarized.items()):
        state_slug = state.split('(')[0].strip().replace(' ', '-').lower()
        
        # Start a new table for each state
        state_table = [
            f"<div class='table-responsive'><table id='{state_slug}' class='table table-bordered'>",
            f"""
                <thead class="thead-light">
                    <tr>
                        <th colspan="9" style="text-align:left;">
                            <span>{state}</span> - Electoral Votes: {timestamped_results[0].electoral_votes}
                        </th>
                    </tr>
                    <tr>
                        <th>Timestamp</th>
                        <th>Leading Candidate</th>
                        <th>Vote Margin</th>
                        <th>Votes Remaining (est.)</th>
                        <th>Change</th>
                        <th>Batch Breakdown</th>
                        <th>Batch Trend</th>
                        <th>Hurdle</th>
                    </tr>
                </thead>
            """
        ]

        # Track cumulative votes for each candidate to calculate batch-specific data
        previous_votes = {candidate['last_name']: 0 for candidate in timestamped_results[0].candidates}

        for summary in timestamped_results:
            # Calculate the total votes in the current batch
            votes_in_batch = summary.votes - sum(previous_votes.values())
            
            # Calculate batch breakdown and update previous votes
            leading_candidate = None
            trailing_candidate = None
            leading_votes_in_batch = 0
            trailing_votes_in_batch = 0
            batch_breakdown = "N/A"  # Default if we can't calculate batch breakdown

            if votes_in_batch > 0:
                # Loop through candidates and calculate the votes gained in this batch
                for candidate in summary.candidates:
                    last_name = candidate['last_name']
                    votes_gained = candidate['votes'] - previous_votes.get(last_name, 0)

                    # Update previous votes for each candidate
                    previous_votes[last_name] = candidate['votes']

                    # Identify the leading and trailing candidates based on votes gained
                    if not leading_candidate or votes_gained > leading_votes_in_batch:
                        trailing_candidate, trailing_votes_in_batch = leading_candidate, leading_votes_in_batch
                        leading_candidate, leading_votes_in_batch = candidate, votes_gained
                    elif not trailing_candidate or votes_gained > trailing_votes_in_batch:
                        trailing_candidate, trailing_votes_in_batch = candidate, votes_gained

                # Calculate batch breakdown percentages if both candidates are found
                if leading_candidate and trailing_candidate:
                    leading_percentage = (leading_votes_in_batch / votes_in_batch) * 100
                    trailing_percentage = (trailing_votes_in_batch / votes_in_batch) * 100
                    batch_breakdown = f"{leading_candidate['last_name']} {leading_percentage:.1f}% / {trailing_percentage:.1f}% {trailing_candidate['last_name']}"

            # Calculate vote margin (differential) correctly each time
            if leading_candidate and trailing_candidate:
                vote_differential = leading_candidate['votes'] - trailing_candidate['votes']
            else:
                vote_differential = "N/A"

            votes_remaining = summary.expected_votes - summary.votes if summary.expected_votes > 0 else "Unknown"
            hurdle_mov_avg_display = f"{summary.hurdle_mov_avg:.2%}" if summary.hurdle_mov_avg is not None else "n/a"

            # Append each row for the state's table
            state_table.append(f"""
                <tr>
                    <td>{summary.timestamp.strftime('%Y-%m-%d %H:%M:%S')}</td>
                    <td>{leading_candidate['last_name'] if leading_candidate else "N/A"}</td>
                    <td>{vote_differential}</td>
                    <td>{votes_remaining if isinstance(votes_remaining, int) and votes_remaining > 0 else "Unknown"}</td>
                    <td>{votes_in_batch:,}</td>
                    <td>{batch_breakdown}</td>
                    <td>{hurdle_mov_avg_display}</td>
                    <td>Unknown</td>
                </tr>
            """)

        # Close the table for the current state and append it to html_output
        state_table.append("</table></div><hr>")
        html_output.extend(state_table)

    return html_output

def html_output(path: str, table_rows: List[str], states_updated: List[str], other_page_html: str):
    html_template = """
    <!DOCTYPE html>
    <html lang="en">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>Election Results</title>
        <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
    </head>
    <body>
        <div class="container">
            <h1>Election Results Summary</h1>
            <p>Last updated: {last_updated}</p>
            <p>{other_page_link}</p>
            <div>{table_content}</div>
        </div>
    </body>
    </html>
    """

    last_updated = datetime.datetime.utcnow().strftime("%Y-%m-%d %H:%M UTC")
    other_page_link = f"Data for all 50 states and DC is <a href='all-state-changes.html'>also available</a>." if "battleground-state-changes.html" in path else "View <a href='battleground-state-changes.html'>battleground states only</a>."
    html_content = html_template.format(
        last_updated=last_updated,
        other_page_link=other_page_html,
        table_content="\n".join(table_rows)
    )

    with open(path, "w", encoding="utf-8") as f:
        f.write(html_content)

if __name__ == "__main__":
    records = fetch_all_records()
    summarized = records
    battlegrounds_summarized = {state: records[state] for state in BATTLEGROUND_STATES if state in records}
    battleground_states_updated = list(battlegrounds_summarized.keys())
    states_updated = list(summarized.keys())

    generate_txt_output("battleground-state-changes.txt", summarized, BATTLEGROUND_STATES)
    generate_csv_output("battleground-state-changes.csv", summarized)
    generate_rss_output("battleground-state-changes.xml", summarized)
    html_output(
        path="battleground-state-changes.html",
        table_rows=html_table(battlegrounds_summarized),
        states_updated=battleground_states_updated,
        other_page_html='Data for all 50 states and DC is <a href="all-state-changes.html">also available</a>.'
    )
    html_output(
        path="all-state-changes.html",
        table_rows=html_table(summarized),
        states_updated=states_updated,
        other_page_html='View <a href="battleground-state-changes.html">battleground states only</a>.'
    )

    print("Script completed successfully.")